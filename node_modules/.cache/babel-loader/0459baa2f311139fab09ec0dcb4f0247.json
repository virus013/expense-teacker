{"ast":null,"code":"var _jsxFileName = \"F:\\\\r-projects\\\\expense-tracker-app\\\\src\\\\components\\\\ExpenseTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Expense from './Expense';\nimport TransactionHistory from './TransactionHistory';\nimport TransactionForm from './TransactionForm';\nimport { uniqueId } from '../utils'; // Aggregator component/container component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transactionData = [];\n\nfunction ExpenseTracker() {\n  _s();\n\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n  const [transactions, setTransactions] = useState([]);\n\n  const saveState = () => {\n    localStorage.setItem('expenseTrackerState', JSON.stringify(transactions));\n  };\n\n  const calculateExpenses = () => {\n    let income = 0,\n        expense = 0;\n    transactions.forEach(data => {\n      if (data.type === 'income') {\n        income += data.amount;\n      } else if (data.type === 'expense') {\n        expense += data.amount;\n      }\n    });\n    saveState();\n    setIncome(income);\n    setExpense(expense);\n  };\n\n  const handleAddNewTransaction = item => {\n    let newTransactions = [...transactions, item];\n    setTransactions(newTransactions);\n  };\n\n  const handleDeleteTransaction = id => {\n    const newTransactions = transactions.filter(item => item.id != id);\n    setTransactions(newTransactions);\n  };\n\n  useEffect(() => {\n    let localState = JSON.parse(localStorage.getItem('expenseTrackerState'));\n\n    if (localState) {\n      setTransactions(localState);\n    } else {\n      calculateExpenses();\n    }\n  }, []);\n  useEffect(() => {\n    calculateExpenses();\n  }, [transactions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expense Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Expense, {\n      income: income,\n      expense: expense\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TransactionHistory, {\n      transactions: transactions,\n      onDeleteTransaction: handleDeleteTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TransactionForm, {\n      onNewTransaction: handleAddNewTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ExpenseTracker, \"r3nEtLyunbUJHMcbREVPOLxhyx0=\");\n\n_c = ExpenseTracker;\nexport default ExpenseTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseTracker\");","map":{"version":3,"sources":["F:/r-projects/expense-tracker-app/src/components/ExpenseTracker.js"],"names":["React","useState","useEffect","Expense","TransactionHistory","TransactionForm","uniqueId","transactionData","ExpenseTracker","income","setIncome","expense","setExpense","transactions","setTransactions","saveState","localStorage","setItem","JSON","stringify","calculateExpenses","forEach","data","type","amount","handleAddNewTransaction","item","newTransactions","handleDeleteTransaction","id","filter","localState","parse","getItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SAASC,QAAT,QAAyB,UAAzB,C,CAEA;;;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAIA,SAASC,cAAT,GAA0B;AAAA;;AAEtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMc,SAAS,GAAG,MAAM;AACpBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,qBAArB,EACIC,IAAI,CAACC,SAAL,CAAeN,YAAf,CADJ;AAEH,GAHD;;AAKA,QAAMO,iBAAiB,GAAG,MAAM;AAC5B,QAAIX,MAAM,GAAG,CAAb;AAAA,QAAgBE,OAAO,GAAG,CAA1B;AAEAE,IAAAA,YAAY,CAACQ,OAAb,CAAsBC,IAAD,IAAU;AAC3B,UAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AACxBd,QAAAA,MAAM,IAAIa,IAAI,CAACE,MAAf;AACH,OAFD,MAEO,IAAIF,IAAI,CAACC,IAAL,KAAc,SAAlB,EAA6B;AAChCZ,QAAAA,OAAO,IAAIW,IAAI,CAACE,MAAhB;AACH;AACJ,KAND;AAQAT,IAAAA,SAAS;AAETL,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACH,GAfD;;AAiBA,QAAMc,uBAAuB,GAAGC,IAAI,IAAI;AACpC,QAAIC,eAAe,GAAG,CAAC,GAAGd,YAAJ,EAAkBa,IAAlB,CAAtB;AACAZ,IAAAA,eAAe,CAACa,eAAD,CAAf;AACH,GAHD;;AAKA,QAAMC,uBAAuB,GAAGC,EAAE,IAAI;AAClC,UAAMF,eAAe,GAAGd,YAAY,CAACiB,MAAb,CAAqBJ,IAAD,IAAUA,IAAI,CAACG,EAAL,IAAWA,EAAzC,CAAxB;AACAf,IAAAA,eAAe,CAACa,eAAD,CAAf;AACH,GAHD;;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI6B,UAAU,GAAGb,IAAI,CAACc,KAAL,CAAWhB,YAAY,CAACiB,OAAb,CAAqB,qBAArB,CAAX,CAAjB;;AACA,QAAIF,UAAJ,EAAgB;AACZjB,MAAAA,eAAe,CAACiB,UAAD,CAAf;AACH,KAFD,MAEO;AACHX,MAAAA,iBAAiB;AACpB;AACJ,GAPQ,EAON,EAPM,CAAT;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACP,YAAD,CAFM,CAAT;AAIA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEJ,MAAjB;AAAyB,MAAA,OAAO,EAAEE;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,kBAAD;AAAoB,MAAA,YAAY,EAAEE,YAAlC;AACI,MAAA,mBAAmB,EAAEe;AADzB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAKI,QAAC,eAAD;AAAiB,MAAA,gBAAgB,EAAEH;AAAnC;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA5DQjB,c;;KAAAA,c;AA8DT,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport Expense from './Expense';\r\nimport TransactionHistory from './TransactionHistory';\r\nimport TransactionForm from './TransactionForm';\r\n\r\nimport { uniqueId } from '../utils';\r\n\r\n// Aggregator component/container component\r\n\r\nconst transactionData = [\r\n   \r\n];\r\n\r\nfunction ExpenseTracker() {\r\n\r\n    const [income, setIncome] = useState(0);\r\n    const [expense, setExpense] = useState(0);\r\n    const [transactions, setTransactions] = useState([]);\r\n    \r\n    const saveState = () => {\r\n        localStorage.setItem('expenseTrackerState', \r\n            JSON.stringify(transactions));\r\n    }\r\n\r\n    const calculateExpenses = () => {\r\n        let income = 0, expense = 0;\r\n        \r\n        transactions.forEach((data) => {\r\n            if (data.type === 'income') {\r\n                income += data.amount;\r\n            } else if (data.type === 'expense') {\r\n                expense += data.amount;\r\n            }\r\n        });\r\n\r\n        saveState();\r\n\r\n        setIncome(income);\r\n        setExpense(expense);\r\n    }\r\n\r\n    const handleAddNewTransaction = item => {\r\n        let newTransactions = [...transactions, item];\r\n        setTransactions(newTransactions);\r\n    }\r\n\r\n    const handleDeleteTransaction = id => {\r\n        const newTransactions = transactions.filter((item) => item.id != id);\r\n        setTransactions(newTransactions);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let localState = JSON.parse(localStorage.getItem('expenseTrackerState'));\r\n        if (localState) {\r\n            setTransactions(localState);\r\n        } else {\r\n            calculateExpenses();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        calculateExpenses();\r\n    }, [transactions]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Expense Tracker</h1>\r\n            <Expense income={income} expense={expense} />\r\n            <TransactionHistory transactions={transactions}\r\n                onDeleteTransaction={handleDeleteTransaction} />\r\n            <TransactionForm onNewTransaction={handleAddNewTransaction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpenseTracker;"]},"metadata":{},"sourceType":"module"}